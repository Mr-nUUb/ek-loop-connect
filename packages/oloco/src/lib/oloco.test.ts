// TODO: update jest-extended and convert all expect(writeSpy.mock.calls[x][y]).toEqual([...]) to expect(writeSpy).toHaveBeenCalledOnceWith([...]) - https://github.com/jest-community/jest-extended/issues/506

import hid, { Device } from 'node-hid'
import * as utils from '../util'
import { OLoCo } from './oloco'

type HidDeviceSpy = (vid: number, pid: number) => Device[]

jest.mock('node-hid')
jest.mock('../util')

const hidDeviceSpy = jest.spyOn(hid, 'devices') as unknown as jest.MockedFunction<HidDeviceSpy>
const hidHidSpy = jest.spyOn(hid, 'HID')
const utilSleepSpy = jest.spyOn(utils, 'sleep')
const prepHidDeviceSpy = () =>
  hidDeviceSpy.mockImplementation((vendorId, productId) => [
    {
      vendorId,
      productId,
      path: '1',
      interface: 0,
      usage: 1,
      release: 0,
    },
  ])
const prepWriteSpy = () => jest.fn().mockImplementation((values: number[]) => values.length)

describe('OLoCo', () => {
  describe('Constructor', () => {
    beforeAll(() => {
      hidHidSpy.mockImplementation(jest.fn())
    })

    afterEach(() => {
      jest.resetAllMocks()
    })

    afterAll(() => {
      jest.restoreAllMocks()
    })

    it('should connect to a controller', async () => {
      hidDeviceSpy.mockImplementationOnce((vendorId, productId) => [
        {
          vendorId,
          productId,
          path: '1',
          interface: 0,
          usage: 1,
          release: 0,
        },
      ])

      expect(() => new OLoCo()).not.toThrow()
      expect(hidDeviceSpy).toHaveBeenCalledOnce()
      expect(hidHidSpy).toHaveBeenCalledOnce()

      jest.restoreAllMocks()
    })

    it('should throw on multiple controllers', async () => {
      hidDeviceSpy.mockImplementationOnce((vendorId, productId) => [
        {
          vendorId,
          productId,
          path: '1',
          interface: 0,
          usage: 1,
          release: 0,
        },
        {
          vendorId,
          productId,
          path: '2',
          interface: 0,
          usage: 1,
          release: 0,
        },
      ])

      expect(() => new OLoCo()).toThrow('Multiple controllers detected: not yet implemented!')
      expect(hidDeviceSpy).toHaveBeenCalledOnce()
      expect(hidHidSpy).not.toHaveBeenCalled()

      jest.restoreAllMocks()
    })

    it('should throw on not found', async () => {
      hidDeviceSpy.mockImplementationOnce(() => [])

      expect(() => new OLoCo()).toThrow("Couldn't find controller: not connected!")
      expect(hidDeviceSpy).toHaveBeenCalledOnce()
      expect(hidHidSpy).not.toHaveBeenCalled()

      jest.restoreAllMocks()
    })

    it('should throw on undefined path', async () => {
      hidDeviceSpy.mockImplementationOnce((vendorId, productId) => [
        {
          vendorId,
          productId,
          interface: 0,
          usage: 1,
          release: 0,
        },
      ])

      expect(() => new OLoCo()).toThrow("Couldn't connect to controller: no path available!")
      expect(hidDeviceSpy).toHaveBeenCalledOnce()
      expect(hidHidSpy).not.toHaveBeenCalled()

      jest.restoreAllMocks()
    })
  })

  describe('Getters', () => {
    beforeAll(() => {
      prepHidDeviceSpy()
    })

    afterAll(() => {
      jest.restoreAllMocks()
    })

    it('should get fan speeds', () => {
      const writeSpy = prepWriteSpy()

      const readSpy = jest
        .fn()
        // F1
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x58, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
        ])
        // F2
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0xbc, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c,
        ])
        // F3
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,
        ])
        // F4
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x03, 0x84, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,
        ])
        // F5
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe8, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a,
        ])
        // F6
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x04, 0x4c, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64,
        ])

      hidHidSpy.mockImplementation(
        jest.fn().mockImplementation(() => ({
          write: writeSpy,
          readTimeout: readSpy,
        })),
      )

      const result = new OLoCo().getFan()

      expect(writeSpy).toHaveBeenCalledTimes(6)
      expect(readSpy).toHaveBeenCalledTimes(6)
      expect(result).toEqual([
        { port: 'F1', rpm: 600, pwm: 50 },
        { port: 'F2', rpm: 700, pwm: 60 },
        { port: 'F3', rpm: 800, pwm: 70 },
        { port: 'F4', rpm: 900, pwm: 80 },
        { port: 'F5', rpm: 1000, pwm: 90 },
        { port: 'F6', rpm: 1100, pwm: 100 },
      ])
    })

    it('should get a specific fan speed', () => {
      const writeSpy = prepWriteSpy()

      const readSpy = jest
        .fn()
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x58, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
        ])

      hidHidSpy.mockImplementation(
        jest.fn().mockImplementation(() => ({
          write: writeSpy,
          readTimeout: readSpy,
        })),
      )

      const result = new OLoCo().getFan('F4')

      expect(writeSpy).toHaveBeenCalledOnce()
      expect(readSpy).toHaveBeenCalledOnce()
      expect(result).toEqual([{ port: 'F4', rpm: 600, pwm: 50 }])
    })

    it('should get sensors', () => {
      const writeSpy = prepWriteSpy()

      const readSpy = jest
        .fn()
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x27, 0xaa, 0x01, 0x03, 0x00, 0x20, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00,
          0x1a, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x64,
        ])

      hidHidSpy.mockImplementation(
        jest.fn().mockImplementation(() => ({
          write: writeSpy,
          readTimeout: readSpy,
        })),
      )

      const result = new OLoCo().getSensor()

      expect(writeSpy).toHaveBeenCalledOnce()
      expect(readSpy).toHaveBeenCalledOnce()
      expect(result).toEqual({
        flow: { port: 'FLO', flow: 112 },
        level: { port: 'LVL', level: 'Good' },
        temps: [
          { port: 'T1', temp: undefined },
          { port: 'T2', temp: 26 },
          { port: 'T3', temp: 30 },
        ],
      })
    })

    it('should get rgb settings', () => {
      const writeSpy = prepWriteSpy()

      const readSpy = jest
        .fn()
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x07, 0x00, 0x64, 0x00, 0xaa, 0xbb,
          0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ])

      hidHidSpy.mockImplementation(
        jest.fn().mockImplementation(() => ({
          write: writeSpy,
          readTimeout: readSpy,
        })),
      )

      const result = new OLoCo().getRgb()

      expect(writeSpy).toHaveBeenCalledOnce()
      expect(readSpy).toHaveBeenCalledOnce()
      expect(result).toEqual({
        port: 'Lx',
        mode: 'SpectrumWave',
        speed: 'Fastest',
        color: { red: 170, green: 187, blue: 204 },
      })
    })

    it('should get rgb settings', () => {
      const writeSpy = prepWriteSpy()

      const readSpy = jest
        .fn()
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x58, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
        ])
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0xbc, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c,
        ])
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,
        ])
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x03, 0x84, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,
        ])
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe8, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a,
        ])
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x04, 0x4c, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64,
        ])
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x07, 0x00, 0x64, 0x00, 0xaa, 0xbb,
          0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ])
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x27, 0xaa, 0x01, 0x03, 0x00, 0x20, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00,
          0x1a, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00,
        ])

      hidHidSpy.mockImplementation(
        jest.fn().mockImplementation(() => ({
          write: writeSpy,
          readTimeout: readSpy,
        })),
      )

      const result = new OLoCo().getInformation()

      expect(writeSpy).toHaveBeenCalledTimes(8)
      expect(readSpy).toHaveBeenCalledTimes(8)
      expect(result).toEqual({
        fans: [
          { port: 'F1', rpm: 600, pwm: 50 },
          { port: 'F2', rpm: 700, pwm: 60 },
          { port: 'F3', rpm: 800, pwm: 70 },
          { port: 'F4', rpm: 900, pwm: 80 },
          { port: 'F5', rpm: 1000, pwm: 90 },
          { port: 'F6', rpm: 1100, pwm: 100 },
        ],
        rgb: {
          port: 'Lx',
          mode: 'SpectrumWave',
          speed: 'Fastest',
          color: { red: 170, green: 187, blue: 204 },
        },
        sensors: {
          flow: { port: 'FLO', flow: 112 },
          level: { port: 'LVL', level: 'Warning' },
          temps: [
            { port: 'T1', temp: undefined },
            { port: 'T2', temp: 26 },
            { port: 'T3', temp: 30 },
          ],
        },
      })
    })

    it('should get fan response curves', async () => {
      utilSleepSpy.mockImplementation(jest.fn())

      const writeSpy = prepWriteSpy()

      const readSpy = jest
        .fn()
        // Backup
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x58, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38,
        ])
        // 0
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x27, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x2c, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ])
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x2c, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ])
        // 10
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x27, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x90, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a,
        ])
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x90, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a,
        ])
        // 20
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x27, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x58, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14,
        ])
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x58, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14,
        ])
        // 30
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x27, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e,
        ])
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x03, 0x20, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e,
        ])
        // 40
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x27, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe8, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28,
        ])
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe8, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28,
        ])
        // 50
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x27, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x04, 0xb0, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
        ])
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x04, 0xb0, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
        ])
        // 60
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x27, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x05, 0x78, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c,
        ])
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x05, 0x78, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c,
        ])
        // 70
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x27, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x06, 0x40, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,
        ])
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x06, 0x40, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,
        ])
        // 80
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x27, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x07, 0x08, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,
        ])
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x07, 0x08, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,
        ])
        // 90
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x27, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x07, 0xd0, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a,
        ])
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x07, 0xd0, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a,
        ])
        // 100
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x27, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x08, 0x98, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64,
        ])
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x17, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x08, 0x98, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64,
        ])
        // Restore
        .mockImplementationOnce(() => [
          0x10, 0x12, 0x27, 0xaa, 0x01, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x58, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38,
        ])

      hidHidSpy.mockImplementation(
        jest.fn().mockImplementation(() => ({
          write: writeSpy,
          readTimeout: readSpy,
        })),
      )

      const result = await new OLoCo().getResponseCurve('F1')

      expect(result).toEqual([
        {
          port: 'F1',
          curve: [
            { pwm: 0, rpm: 300 },
            { pwm: 10, rpm: 400 },
            { pwm: 20, rpm: 600 },
            { pwm: 30, rpm: 800 },
            { pwm: 40, rpm: 1000 },
            { pwm: 50, rpm: 1200 },
            { pwm: 60, rpm: 1400 },
            { pwm: 70, rpm: 1600 },
            { pwm: 80, rpm: 1800 },
            { pwm: 90, rpm: 2000 },
            { pwm: 100, rpm: 2200 },
          ],
        },
      ])
    })
  })

  describe('Setters', () => {
    beforeAll(() => {
      prepHidDeviceSpy()
    })

    afterAll(() => {
      jest.restoreAllMocks()
    })

    it('should change read timeout', () => {
      hidHidSpy.mockImplementation(jest.fn().mockImplementation(() => ({})))
      const oloco = new OLoCo()
      oloco.setReadTimeout(250)
      expect(oloco['_readTimeout']).toBe(250)
    })

    it('should change fan speeds', () => {
      const writeSpy = prepWriteSpy()
      const readSpy = jest
        .fn()
        .mockImplementation(() => [0x10, 0x12, 0x27, 0xaa, 0x01, 0x03, 0x00, 0x10])
      hidHidSpy.mockImplementation(
        jest.fn().mockImplementation(() => ({
          write: writeSpy,
          readTimeout: readSpy,
        })),
      )

      new OLoCo().setFan(60)

      expect(writeSpy).toHaveBeenCalledTimes(6)
      expect(readSpy).toHaveBeenCalledTimes(6)

      // F1
      expect(writeSpy.mock.calls[0][0]).toEqual([
        0x10, 0x12, 0x29, 0xaa, 0x01, 0x10, 0xa0, 0xa0, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      ])
      // F2
      expect(writeSpy.mock.calls[1][0]).toEqual([
        0x10, 0x12, 0x29, 0xaa, 0x01, 0x10, 0xa0, 0xc0, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      ])
      // F3
      expect(writeSpy.mock.calls[2][0]).toEqual([
        0x10, 0x12, 0x29, 0xaa, 0x01, 0x10, 0xa0, 0xe0, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      ])
      // F4
      expect(writeSpy.mock.calls[3][0]).toEqual([
        0x10, 0x12, 0x29, 0xaa, 0x01, 0x10, 0xa1, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      ])
      // F5
      expect(writeSpy.mock.calls[4][0]).toEqual([
        0x10, 0x12, 0x29, 0xaa, 0x01, 0x10, 0xa1, 0x20, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      ])
      // F6
      expect(writeSpy.mock.calls[5][0]).toEqual([
        0x10, 0x12, 0x29, 0xaa, 0x01, 0x10, 0xa1, 0xe0, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      ])
    })

    it('should change a specific fan speed', () => {
      const writeSpy = prepWriteSpy()
      const readSpy = jest
        .fn()
        .mockImplementation(() => [0x10, 0x12, 0x27, 0xaa, 0x01, 0x03, 0x00, 0x10])
      hidHidSpy.mockImplementation(
        jest.fn().mockImplementation(() => ({
          write: writeSpy,
          readTimeout: readSpy,
        })),
      )

      new OLoCo().setFan(60, 'F3')

      expect(writeSpy).toHaveBeenCalledOnce()
      expect(readSpy).toHaveBeenCalledOnce()
      expect(writeSpy.mock.calls[0][0]).toEqual([
        0x10, 0x12, 0x29, 0xaa, 0x01, 0x10, 0xa0, 0xe0, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      ])
    })

    it('should change rgb settings', () => {
      const writeSpy = prepWriteSpy()
      const readSpy = jest
        .fn()
        .mockImplementation(() => [0x10, 0x12, 0x27, 0xaa, 0x01, 0x03, 0x00, 0x10])
      hidHidSpy.mockImplementation(
        jest.fn().mockImplementation(() => ({
          write: writeSpy,
          readTimeout: readSpy,
        })),
      )

      new OLoCo().setRgb({
        mode: 'SpectrumWave',
        speed: 'Fastest',
        color: { red: 55, green: 66, blue: 77 },
      })

      expect(writeSpy).toHaveBeenCalledOnce()
      expect(readSpy).toHaveBeenCalledOnce()
      expect(writeSpy.mock.calls[0][0]).toEqual([
        0x10, 0x12, 0x29, 0xaa, 0x01, 0x10, 0xa2, 0x60, 0x00, 0x10, 0x20, 0x00, 0x07, 0x00, 0x64,
        0x00, 0x37, 0x42, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      ])
    })

    it('should change rgb settings and treat CoveringMarquee differently', () => {
      const writeSpy = prepWriteSpy()
      const readSpy = jest
        .fn()
        .mockImplementation(() => [0x10, 0x12, 0x27, 0xaa, 0x01, 0x03, 0x00, 0x10])
      hidHidSpy.mockImplementation(
        jest.fn().mockImplementation(() => ({
          write: writeSpy,
          readTimeout: readSpy,
        })),
      )

      new OLoCo().setRgb({
        mode: 'CoveringMarquee',
        speed: 'Fastest',
        color: { red: 55, green: 66, blue: 77 },
      })

      expect(writeSpy).toHaveBeenCalledOnce()
      expect(readSpy).toHaveBeenCalledOnce()
      expect(writeSpy.mock.calls[0][0]).toEqual([
        0x10, 0x12, 0x29, 0xaa, 0x01, 0x10, 0xa2, 0x60, 0x00, 0x10, 0x20, 0x00, 0x05, 0xff, 0x64,
        0x00, 0x37, 0x42, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      ])
    })
  })

  describe('Misc', () => {
    beforeAll(() => {
      prepHidDeviceSpy()
    })

    afterAll(() => {
      jest.restoreAllMocks()
    })

    it('should close connection', () => {
      const closeSpy = jest.fn().mockImplementation(jest.fn())
      hidHidSpy.mockImplementation(
        jest.fn().mockImplementation(() => ({
          close: closeSpy,
        })),
      )
      new OLoCo().close()
      expect(closeSpy).toHaveBeenCalledOnce()
    })

    it('should throw on length mismatch', () => {
      const writeSpy = prepWriteSpy()

      const readSpy = jest.fn().mockImplementationOnce(() => [0x10, 0x12, 0x17])

      hidHidSpy.mockImplementation(
        jest.fn().mockImplementation(() => ({
          write: writeSpy,
          readTimeout: readSpy,
        })),
      )

      expect(() => new OLoCo().getFan('F4')).toThrow('length mismatch')
    })

    it('should throw on index mismatch', () => {
      const writeSpy = prepWriteSpy()

      const readSpy = jest.fn().mockImplementationOnce(() => [0x10, 0x10, 0x17, 0xaa])

      hidHidSpy.mockImplementation(
        jest.fn().mockImplementation(() => ({
          write: writeSpy,
          readTimeout: readSpy,
        })),
      )

      expect(() => new OLoCo().getFan('F4')).toThrow('mismatch on index 1')
    })

    it('should throw on missing response', () => {
      const writeSpy = prepWriteSpy()

      const readSpy = jest.fn().mockImplementationOnce(() => [])

      hidHidSpy.mockImplementation(
        jest.fn().mockImplementation(() => ({
          write: writeSpy,
          readTimeout: readSpy,
        })),
      )

      expect(() => new OLoCo().getFan('F4')).toThrow('Unable to read response')
    })
  })
})
